#!/usr/bin/env ruby
#
# MIT License
#
# Copyright (c) 2018 Lazarus Lazaridis
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

require 'yaml'
require 'fileutils'
require 'elasticsearch'
require 'optparse'
require 'tty-prompt'
require 'tty-cursor'

CONFIGURATION_FILE = File.expand_path('~/.elman.yml')
INDEX_NAME = 'elman'
APROPOS_REGEX = /(.*)\s\(\d*.*\)\s*-\s*(.*)/
PAGER = ENV['PAGER'] ? ENV['PAGER'] : 'less'

@prompt = TTY::Prompt.new
@cursor = TTY::Cursor

# Creates the configuration file in user's home directory
def create_default_configuration_file
  puts 'Creating the default configuration'
  FileUtils.touch(CONFIGURATION_FILE)

  configuration = YAML::load_file(CONFIGURATION_FILE) || {}
  configuration[:elasticsearch] = { host: 'localhost',
                                    port: '9200',
                                    search_results_size: 10 }

  File.write(CONFIGURATION_FILE, configuration.to_yaml)
end

# Deletes the index
def delete_index
  client.indices.delete index: INDEX_NAME rescue false
end

# Creates the index
def create_index
  if client.indices.exists? index: INDEX_NAME
    puts "Index exists..."
    return
  end

  puts "Creating index: #{INDEX_NAME}"
  client.indices.create  index: INDEX_NAME,
                         body: {
                          mappings: {
                            properties: {
                              type: { type: :text},
                              command: {
                                type: :text
                              },
                              description: {
                                type: :text,
                                  analyzer: :english
                              },
                              manpage: {
                                type: :text,
                                  analyzer: :english
                                }
                              }
                          }
                         }
end

# Loads the man pages
def load_manpages
  all_pages = `apropos .`.split "\n"
  all_pages.each do |line|
    matches = APROPOS_REGEX.match line
    command = matches[1]
    description = matches[2]
    manpage = `man #{command}`

    client.index index: INDEX_NAME,
                  type: '_doc',
                  body: {
                    command: command,
                    description: description,
                    manpage: manpage
                  }
  end
end

# Searches the index
def search(term)
  result = client.search index: INDEX_NAME,
                         size: @elasticseach_search_results_size,
                         body: {
                           query: {
                             multi_match: {
                               query: term,
                               type: :cross_fields,
                               fields: ['command', 'description^3', 'manpage^3'],
                               operator: :or,
                               tie_breaker: 0.1,
                               minimum_should_match: '40%',
                               cutoff_frequency: 0.1
                             }
                           }
                         }

  result['hits']['hits'].map{ |hit| { command: hit['_source']['command'],
                                      description: hit['_source']['description'],
                                      manpage: hit['_source']['manpage'] } }
end

# Utility method to access the elasticseach client
def client
  @client ||= Elasticsearch::Client.new host: @elasticsearch_host,
                                        port: @elasticsearch_port
end

def load_configuration
  configuration = YAML::load_file(CONFIGURATION_FILE)
  @elasticsearch_host = configuration[:elasticsearch][:host]
  @elasticsearch_port = configuration[:elasticsearch][:port]
  @elasticseach_search_results_size = configuration[:elasticsearch][:search_results_size]
end

create_default_configuration_file unless File.exists?(CONFIGURATION_FILE)
load_configuration

# Displays the man page of a selection
def display_manpage_for_selection(selection, query)
  IO.popen(PAGER, 'w') do |f|
    f.puts @results[selection][:manpage]
  end

  print @cursor.up
  print @cursor.clear_line
  display_prompt(query)
end

def truncate(str)
  if str.length > 70
    "#{str[0..67]}..."
  else
    str
  end
end

def new_search
  print @cursor.up
  print @cursor.clear_line
  search = @prompt.ask("Search terms", required: true)
  handle_search(search)
end

def display_prompt(query=[])
  prompt_string = ("Type q to exit or / for new query")
  if !@results.nil?
    prompt_string.gsub!(/Type /, 'Type a number for the corresponding manpage, ')
  end
  @prompt.expand(prompt_string) do |q|
    q.choice key: '/', name: 'Perform a new search' do new_search end
    unless @results.nil? || @results.size == 0 
      @results.uniq.each_index do |res| 
        q.choice key: res.to_s, name: res.to_s do display_manpage_for_selection(:key.to_s.to_i, query) end
      end
    end
    q.choice key: 'q', name: 'Quit' do quit end
  end
end

# Displays the current matches and prompts for user selection
def prompt_for_selection(query)
  maxlen = []
  @results.uniq.each { |x| maxlen << x[:command].length } unless @results.nil?
  maxlen = maxlen.max unless maxlen.empty?
  
  puts @results.uniq.map.with_index { |result, index| "#{index}: #{result[:command].ljust(maxlen + 2)} #{truncate(result[:description])}" } unless query.empty?
  
  if query.empty?
    display_prompt
  elsif @results.size == 0
    puts "No man pages found matching your query."
    @results = nil
    display_prompt
  else
    display_prompt(query)
  end

end

def quit
  exit 0
end


# Use option parser to display info
OptionParser.new do |opts|
  opts.banner = "Usage: elman [options] query"

  opts.separator ""
  opts.separator "Specific options:"

  opts.on('-s', '--setup', 'Setup elman - (re)creates the index and loads all man pages') do
    delete_index
    create_index
    load_manpages
    exit 0
  end

  opts.on_tail('-h', '--help', 'Show this message') do
    puts opts
    exit 0
  end
end.parse!

# Searches the given query
def handle_search(query)
  @results = search query unless query.empty?

  prompt_for_selection(query)
end

handle_search ARGV.join ' '
